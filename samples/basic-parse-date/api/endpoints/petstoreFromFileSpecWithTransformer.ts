/*
 * Generated by orval v4.1.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import {
  Pets,
  ListPetsParams,
  CreatePetsBody,
  Pet
} from '../model'
import {
  rest
} from 'msw'
import faker from 'faker'
import { parseDate } from '../mutator/response-type'


export const getSwaggerPetstore = () => ({
  listPets(
    params?: ListPetsParams,
    version: number = 1,
  ) {
    return parseDate<Pets>({url: `/v${version}/pets`, method: 'get',
        params,
    });
  },
  createPets(
    createPetsBody: CreatePetsBody,
    version: number = 1,
  ) {
    return parseDate<unknown>({url: `/v${version}/pets`, method: 'post',
      data: createPetsBody
    });
  },
  showPetById(
    petId: string,
    version: number = 1,
  ) {
    return parseDate<Pet>({url: `/v${version}/pets/${petId}`, method: 'get'
    });
  },
});


export const getSwaggerPetstoreMSW = () => [
rest.get('*/v:version/pets', (req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, 'Mocked status'),
ctx.json([...Array(faker.random.number({min: 1, max: 10}))].map(() => ({id: faker.random.number(), name: faker.random.word(), tag: faker.helpers.randomize([faker.random.word(), undefined]), createdAt: faker.helpers.randomize([faker.random.word(), undefined])}))),
      )
    }),rest.post('*/v:version/pets', (req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, 'Mocked status'),
      )
    }),rest.get('*/v:version/pets/:petId', (req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, 'Mocked status'),
ctx.json({id: faker.random.number(), name: faker.random.word(), tag: faker.helpers.randomize([faker.random.word(), undefined]), createdAt: faker.helpers.randomize([faker.random.word(), undefined])}),
      )
    }),]
